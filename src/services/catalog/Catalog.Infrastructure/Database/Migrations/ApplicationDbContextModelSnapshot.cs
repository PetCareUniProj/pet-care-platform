// <auto-generated />
using Catalog.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Catalog.Infrastructure.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Catalog.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_brands");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_brands_name");

                    b.ToTable("brands", "public");
                });

            modelBuilder.Entity("Catalog.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_categories_name");

                    b.ToTable("categories", "public");
                });

            modelBuilder.Entity("Catalog.Domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableStock")
                        .HasColumnType("integer")
                        .HasColumnName("available_stock");

                    b.Property<int>("CatalogBrandId")
                        .HasColumnType("integer")
                        .HasColumnName("catalog_brand_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("MaxStockThreshold")
                        .HasColumnType("integer")
                        .HasColumnName("max_stock_threshold");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<bool>("OnReorder")
                        .HasColumnType("boolean")
                        .HasColumnName("on_reorder");

                    b.Property<string>("PictureFileName")
                        .HasColumnType("text")
                        .HasColumnName("picture_file_name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("RestockThreshold")
                        .HasColumnType("integer")
                        .HasColumnName("restock_threshold");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("slug");

                    b.HasKey("Id")
                        .HasName("pk_items");

                    b.HasIndex("CatalogBrandId")
                        .HasDatabaseName("ix_items_catalog_brand_id");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ix_items_slug");

                    b.ToTable("items", "public");
                });

            modelBuilder.Entity("catalog_item_categories", b =>
                {
                    b.Property<int>("item_id")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<int>("category_id")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.HasKey("item_id", "category_id")
                        .HasName("pk_catalog_item_categories");

                    b.HasIndex("category_id")
                        .HasDatabaseName("ix_catalog_item_categories_category_id");

                    b.ToTable("catalog_item_categories", "public");
                });

            modelBuilder.Entity("Catalog.Domain.Entities.Item", b =>
                {
                    b.HasOne("Catalog.Domain.Entities.Brand", "CatalogBrand")
                        .WithMany("Items")
                        .HasForeignKey("CatalogBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_brands_catalog_brand_id");

                    b.Navigation("CatalogBrand");
                });

            modelBuilder.Entity("catalog_item_categories", b =>
                {
                    b.HasOne("Catalog.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_catalog_item_categories_categories_category_id");

                    b.HasOne("Catalog.Domain.Entities.Item", null)
                        .WithMany()
                        .HasForeignKey("item_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_catalog_item_categories_items_item_id");
                });

            modelBuilder.Entity("Catalog.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
